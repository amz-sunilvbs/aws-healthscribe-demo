// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
import { useState, useEffect } from 'react';
import { UserPreferences, DEFAULT_USER_PREFERENCES } from '@/types/UserPreferences';

// API configuration - using the deployed CDK API Gateway endpoint
const API_BASE_URL = 'https://yk1uelb9h6.execute-api.us-east-1.amazonaws.com/prod';
const USER_PREFERENCES_KEY = 'user-preferences';
const USER_ID_KEY = 'anonymous-user-id';

function generateAnonymousUserId(): string {
  return `anonymous-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

function getUserId(): string {
  let userId = localStorage.getItem(USER_ID_KEY);
  if (!userId) {
    userId = generateAnonymousUserId();
    localStorage.setItem(USER_ID_KEY, userId);
  }
  return userId;
}

// Fallback localStorage functions
function loadPreferencesFromLocalStorage(): UserPreferences {
  try {
    const stored = localStorage.getItem(USER_PREFERENCES_KEY);
    if (stored) {
      const parsed = JSON.parse(stored);
      return { ...DEFAULT_USER_PREFERENCES, ...parsed };
    }
  } catch (error) {
    console.error('Error loading user preferences from localStorage:', error);
  }
  return DEFAULT_USER_PREFERENCES;
}

function savePreferencesToLocalStorage(preferences: UserPreferences): void {
  try {
    localStorage.setItem(USER_PREFERENCES_KEY, JSON.stringify(preferences));
  } catch (error) {
    console.error('Error saving user preferences to localStorage:', error);
  }
}

// DynamoDB API functions
async function loadPreferencesFromAPI(userId: string): Promise<UserPreferences> {
  try {
    if (!API_BASE_URL) {
      console.log('API not configured, using localStorage');
      return loadPreferencesFromLocalStorage();
    }

    const response = await fetch(`${API_BASE_URL}/preferences/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (response.ok) {
      const preferences = await response.json();
      return { ...DEFAULT_USER_PREFERENCES, ...preferences };
    } else {
      console.warn('Failed to load preferences from API, using localStorage fallback');
      return loadPreferencesFromLocalStorage();
    }
  } catch (error) {
    console.error('Error loading preferences from API:', error);
    return loadPreferencesFromLocalStorage();
  }
}

async function savePreferencesToAPI(userId: string, preferences: UserPreferences): Promise<boolean> {
  try {
    if (!API_BASE_URL) {
      console.log('API not configured, using localStorage');
      savePreferencesToLocalStorage(preferences);
      return true;
    }

    const response = await fetch(`${API_BASE_URL}/preferences/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(preferences),
    });

    if (response.ok) {
      // Also save to localStorage as backup
      savePreferencesToLocalStorage(preferences);
      return true;
    } else {
      console.warn('Failed to save preferences to API, using localStorage fallback');
      savePreferencesToLocalStorage(preferences);
      return false;
    }
  } catch (error) {
    console.error('Error saving preferences to API:', error);
    savePreferencesToLocalStorage(preferences);
    return false;
  }
}

export function useUserPreferences() {
  const [preferences, setPreferences] = useState<UserPreferences>(DEFAULT_USER_PREFERENCES);
  const [userId] = useState<string>(getUserId);
  const [loading, setLoading] = useState<boolean>(true);

  // Load preferences on mount
  useEffect(() => {
    const loadPreferences = async () => {
      setLoading(true);
      try {
        const loadedPreferences = await loadPreferencesFromAPI(userId);
        setPreferences(loadedPreferences);
      } catch (error) {
        console.error('Error loading preferences:', error);
        setPreferences(loadPreferencesFromLocalStorage());
      } finally {
        setLoading(false);
      }
    };

    loadPreferences();
  }, [userId]);

  const updatePreferences = async (updates: Partial<UserPreferences>) => {
    const newPreferences = { ...preferences, ...updates };
    setPreferences(newPreferences);
    
    // Save asynchronously
    try {
      await savePreferencesToAPI(userId, newPreferences);
    } catch (error) {
      console.error('Error saving preferences:', error);
    }
  };

  const resetToDefaults = async () => {
    setPreferences(DEFAULT_USER_PREFERENCES);
    
    try {
      await savePreferencesToAPI(userId, DEFAULT_USER_PREFERENCES);
    } catch (error) {
      console.error('Error resetting preferences:', error);
    }
  };

  return {
    preferences,
    updatePreferences,
    resetToDefaults,
    userId,
    loading,
  };
}
