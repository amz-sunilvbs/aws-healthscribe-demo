import{d as p,ar as f,t as d,s as m,X as y}from"./index-XWbvETcy.js";const i=e=>typeof ReadableStream=="function"&&(e?.constructor?.name===ReadableStream.name||e instanceof ReadableStream),h="The stream has already been transformed.",E=e=>{if(!u(e)&&!i(e)){const r=e?.__proto__?.constructor?.name||e;throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${r}`)}let t=!1;const o=async()=>{if(t)throw new Error(h);return t=!0,await m(e)},n=r=>{if(typeof r.stream!="function")throw new Error(`Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.
If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body`);return r.stream()};return Object.assign(e,{transformToByteArray:o,transformToString:async r=>{const s=await o();if(r==="base64")return p(s);if(r==="hex")return f(s);if(r===void 0||r==="utf8"||r==="utf-8")return d(s);if(typeof TextDecoder=="function")return new TextDecoder(r).decode(s);throw new Error("TextDecoder is not available, please make sure polyfill is provided.")},transformToWebStream:()=>{if(t)throw new Error(h);if(t=!0,u(e))return n(e);if(i(e))return e;throw new Error(`Cannot transform payload to web stream, got ${e}`)}})},u=e=>typeof Blob=="function"&&e instanceof Blob;function l(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}const b=(e,t,o,n,r,s)=>{if(t!=null&&t[o]!==void 0){const a=n();if(a.length<=0)throw new Error("Empty value provided for input HTTP label: "+o+".");e=e.replace(r,s?a.split("/").map(c=>l(c)).join("/"):l(a))}else throw new Error("No value provided for input HTTP label: "+o+".");return e};function R(e,t){return new w(e,t)}class w{constructor(t,o){this.input=t,this.context=o,this.query={},this.method="",this.headers={},this.path="",this.body=null,this.hostname="",this.resolvePathStack=[]}async build(){const{hostname:t,protocol:o="https",port:n,path:r}=await this.context.endpoint();this.path=r;for(const s of this.resolvePathStack)s(this.path);return new y({protocol:o,hostname:this.hostname||t,port:n,method:this.method,path:this.path,query:this.query,body:this.body,headers:this.headers})}hn(t){return this.hostname=t,this}bp(t){return this.resolvePathStack.push(o=>{this.path=`${o?.endsWith("/")?o.slice(0,-1):o||""}`+t}),this}p(t,o,n,r){return this.resolvePathStack.push(s=>{this.path=b(s,this.input,t,o,n,r)}),this}h(t){return this.headers=t,this}q(t){return this.query=t,this}b(t){return this.body=t,this}m(t){return this.method=t,this}}export{i,R as r,E as s};
